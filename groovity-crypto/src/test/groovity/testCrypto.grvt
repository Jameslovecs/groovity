/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
 
/**
 * Basic validation of round-trip encryption/decryption
 *
 * @author Alex Vigdor
 */
import com.disney.groovity.compile.GroovityClassLoader
import com.disney.groovity.conf.Configurator
 
load '/groovity/crypto'

def setDefaultCryptoKey(GroovityClassLoader loader, String key){
	loader.configure([
		configure: { path, names, setter ->
			setter.accept('DEFAULT_CRYPTO_KEY', key)
		}
	] as Configurator)
}

def payload = "Hello World".bytes

error = null;
try{
	encrypted = crypto.encrypt(payload)
}
catch(Exception e){
	error = e
}
assert error != null

keyLengthBytes = 16

def classLoader = crypto.getClass().getClassLoader()
setDefaultCryptoKey(classLoader, run('/groovity/cryptoKeyGen'))

encrypted = crypto.encrypt(payload)

assert payload != encrypted

def decrypted = crypto.decrypt(encrypted)

assert decrypted == payload

def myKeyHex = run('/groovity/cryptoKeyGen')
def mySecretKey = crypto.getSecretKey(myKeyHex)
def myEncryptedByHex = crypto.encrypt(payload,myKeyHex)
def myEncryptedByKey = crypto.encrypt(payload,mySecretKey)
def hexRT = crypto.decrypt(myEncryptedByHex,mySecretKey)
def keyRT = crypto.decrypt(myEncryptedByKey,myKeyHex)
assert hexRT == payload
assert keyRT == payload

setDefaultCryptoKey(classLoader, "")