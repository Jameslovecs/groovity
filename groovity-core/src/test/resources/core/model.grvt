/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
class MyData{
	Writable template
	String name
	Date time
	boolean active
	byte[] sig
	char[] flags
	@ModelSkip String forgetMe = "not here"
	@ModelSkip boolean isHappening(){ true }
}

def d = new MyData()
d.name = "Joe"
d.template = <~Hello ${d.name}~>
d.time = new Date()
d.time.setTime(1000000)
d.active=true
d.sig = [(byte)'a',(byte)'b',(byte)'c'] as byte[]
d.flags = [(char)'x',(char)'y',(char)'z'] as char[]

def m = Model.mapObject(d, 
	ModelFilter.exclude('name'), 
	ModelFilter.copy('time','timeSeconds'){ it.time/1000 }, 
	ModelFilter.rename('template','greeting'),
	ModelFilter.add('inactive'){ !it.active }
).sort()
write(value:[data:m,part1:{ getPart1() }, part2: { getPart2() }, part3: { null } ])


def getPart1(){
	[
		subpartA: getSubPartA(),
		subPartB: async{ getSubPartB() },
		subPartC: { getSubPartC() }
	]
}

def getPart2(){
	async{ 'wheat' }
}

def getSubPartA(){
	'subPartA'
}

def getSubPartB(){
	'subPartB'
}

def getSubPartC(){
	async{ 'subPartC' }
}

def someModel = [
	images : [
		[ name: 'foo.jpg' ],
		[ name: 'bar.jpg' ]
	],
	master:[
		name: 'xyz.jpg'
	]
]

write(value:someModel, filter:[ModelFilter.add('images.reverse'){ it.name.reverse() }, ModelFilter.add('main.reverse'){ it.name.reverse() }, ModelFilter.rename('master','main'), ModelFilter.add('count'){it.images.size()}])