/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.data.StorePayload
import com.disney.groovity.data.AttachmentCollector

static conf=[
	source:'sql',
	ttl:120,
	refresh:90,
	'sql.dataSource':'portalDB',
	'sql.tableName':'inbox',
	'sql.dateCol':'lastAccess'
]

class Inbox implements DataModel, Stored, HasRowId{
 	long personId;
 	Date lastAccess;
	
	Inbox store(){
		HasRowId.super.store()
		load('/data/factory').invalidate('inbox',"personId=${personId}")
	}
	
	public Object getPerson(){
		load('/data/factory')('person',personId.toString())
	}
	
	public Collection getNotices(){
		getPerson().notices
	}
	
	public void accessed(){
		lastAccess = new Date()
		store()
	}
	
	public Date getLastMod(){
		def notices = getNotices()
		if(notices){
			return notices.max{ it.sent }.sent
		}
	}
	
	public boolean isFresh(){
		Date lastMod = getLastMod();
		if(lastMod){
			return (lastAccess == 0 || lastMod > lastAccess)
		}
	}
	
	void storeFilters(List<ModelFilter> filters){
	 	filters.add(ModelFilter.exclude('person','notices','lastMod','fresh'))
	 	Stored.super.storeFilters(filters)
	}
	
}

new Inbox()