/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
load '/data/factory'

CountDownLatch watchedWagonsLatch = new CountDownLatch(103)
CountDownLatch triWatchedWagonsLatch = new CountDownLatch(17)

ConcurrentHashMap watchedWagons = new ConcurrentHashMap()
ConcurrentHashMap triWatchedWagons = new ConcurrentHashMap()
def wagonWatch = factory.watch('wagon', 5){
	if(watchedWagons.put(it.id, it) == null){
		watchedWagonsLatch.countDown()
	}
	//log(info:"Saw ${it.id} ${it.modified}")
}
def triWagonWatch = factory.watch('wagon','numWheels=3', 5){
	if(triWatchedWagons.put(it.id, it) == null){
		triWatchedWagonsLatch.countDown()
	}
	//log(info:"Saw ${it.id} ${it.modified}")
}

def compareFilter = ModelFilter.exclude('pointer')
def myWagon = factory('wagon')

log(debug:"Created ${myWagon}")

myWagon.numWheels=18
myWagon.payload='furniture'
myWagon.store()

def checkWagon = factory(myWagon.pointer)
assert checkWagon.map() == myWagon.map()
assert checkWagon.map(compareFilter) == factory('sql',"wagonDB/wagon?id=${myWagon.pointer.id}").map(compareFilter)

log(debug:"Now I have ${myWagon} ${myWagon.pointer}")

myWagon.ownerId=14
myWagon.store()
factory.invalidate(myWagon.pointer)
def checkWagon2 = factory(myWagon.pointer)
assert checkWagon2.map() == myWagon.map()

def secondWagon = factory('wagon')
secondWagon.putAll([
	ownerId:42,
	numWheels:18,
	payload:'toys'
])
secondWagon.store()

def wagons = factory('wagon',"wagonDB/wagon?numWheels=18")
assert wagons.size() == 2 
assert wagons.find{ it.map() == myWagon.map() }
assert wagons.find{ it.map() == secondWagon.map() }

log(debug:"Now I have ${factory(myWagon.pointer)}")

myWagon.delete()

def checkWagon3 = factory(myWagon.pointer)
assert checkWagon3 == null

//now test pagination

(0..100).each{
	def aWagon = factory('wagon')
	aWagon.payload="something ${it}"
	aWagon.numWheels = it % 6
	aWagon.ownerId = it
	aWagon.store()
}

def wagonAsc = factory('wagon',"orderBy=ownerId+ASC&offset=7&limit=5")
def wagonDesc = factory('wagon',"orderBy=ownerId+DESC&offset=7&limit=5")

assert wagonAsc != wagonDesc
assert wagonAsc.first().ownerId==7
assert wagonAsc.last().ownerId==11
assert wagonDesc.first().ownerId==93
assert wagonDesc.last().ownerId==89

def wagonCount = factory('wagon','count?numWheels=3')
assert wagonCount == 17

try{
	watchedWagonsLatch.await(3, TimeUnit.SECONDS)
}
finally{
	wagonWatch.cancel(false)
	try{
		triWatchedWagonsLatch.await(3, TimeUnit.SECONDS)
	}
	finally{
		triWagonWatch.cancel(false)
	}
}

	