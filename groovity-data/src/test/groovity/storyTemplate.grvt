/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import com.disney.groovity.servlet.error.StatusException

static web=[
	path:'/story/{id}',
	output:'text/html'
]

static args=[
	id: String.class
]

static storyFilter = [
	ModelFilter.NULL,
	ModelFilter.rename('references','seeAlso'),
	ModelFilter.transform('seeAlso'){ refs->
		load('/data/factory')(refs) 
	},
	ModelFilter.transform('authors'){ refs->
		 refs.collect{ load('/data/factory')('author',it) }
	},
	ModelFilter.collapse('seeAlso.pointer'),
	ModelFilter.include('*','authors.name','authors.twitter','seeAlso.name','seeAlso.duration','seeAlso.wordCount','seeAlso.id','seeAlso.type'),
	ModelFilter.collapse('pointer'),
	ModelFilter.exclude('type')
]

load '/data/factory'

def story = factory('story',id)
if(!story){
	throw new StatusException("Not Found",404,"No story ID ${id} could be located")
}

refTemplates = [
	story:<~ ${ref.name} (story, wordcount ${ref.wordCount}, ${ref.pointer}) ~>,
	video:<~ ${ref.name} (video, duration ${ref.duration}, ${ref.pointer}) ~>
]




<~
<html>
<body>
<h1>${story.name}</h1>
<g:if test="${story.hasAuthors()}">
<p>
<em>${story.byline}</em>
</p>
</g:if>

<p>
${story.body}
</p>
<g:if test="${story.hasReferences()}">
	See also
	<ul>
		<g:each var="ref" in ="${story.resolveReferences()}">
			<li><a href="#">${refTemplates[ref.pointer.type]}</a></li>
		</g:each>
	</ul>
</g:if>
In Json (default):
<pre>
${story}
</pre>
In json(custom)
<pre>
<g:write value="${story}" pretty="true" filter="${storyFilter}"/>
</pre>
</body>
</html>
~>
