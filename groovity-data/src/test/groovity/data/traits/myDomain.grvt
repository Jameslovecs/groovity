/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/

trait HasName implements Model{
	String name
}

trait IsPerson implements Model{
	String givenName
	String familyName
	String nickName
}

trait HasAuthors implements Model{
	String[] authors
	
	public Collection<IsPerson> resolveAuthors(){
		if(authors){
			return load('/data/factory')('author',authors)
		}
	}
	
	@CompileStatic
	public boolean hasAuthors(){
		authors
	}
	
	public void storeFilters(List<ModelFilter> filters){
		filters.add(ModelFilter.exclude('byline'))
		super.storeFilters(filters)
	}

	public Writable getByline(){
		<~
		<g:set var="delim" value=""/>
		<g:write value="By"/>
		<g:each var="author" in="${resolveAuthors()}">
			<g:write value="${delim} ${author.name} (${author.twitter})" />
			<g:set var="delim" value=","/>
		</g:each> 
		~>
	}
}

trait HasReferences implements Model{
	Pointer[] references
	
	public boolean hasReferences(){
		references
	}
	
	public List<DataModel> resolveReferences(){
		if(references){
			return load('/data/factory')(references)
		}
	}
	
	public void setReferences(Pointer... references){
		this.references = references
	}
	
	public void setReferences(List<Map> references){
		if(references){
			this.references = Pointer.from(references)
		}
	}
}
