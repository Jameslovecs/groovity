/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import java.util.Date;
import java.util.Calendar;
import java.util.HashMap;
import java.util.TimeZone;
import java.text.Format;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ChoiceFormat;
import java.text.SimpleDateFormat;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.datatype.DatatypeFactory;

@CompileStatic public class RelativeDate{
	public boolean today = false;
	public boolean yesterday = false;
	public boolean future = false;
	public long millis;
	public Date date;
	public int seconds;
	public int minutes;
	public int hours;
	public int days;
	
	public RelativeDate(Calendar cal){
		this.date = cal.time;
		this.millis = System.currentTimeMillis() - cal.getTimeInMillis();
		future = (millis < 0);
		Calendar compare = Calendar.getInstance();
		compare.setTimeZone(cal.getTimeZone());
		compare.set(Calendar.MILLISECOND,0);
		compare.set(Calendar.SECOND,0);
		compare.set(Calendar.MINUTE,0);
		compare.set(Calendar.HOUR_OF_DAY,0);
		if(compare.compareTo(cal) <= 0){
			today=true;
		}
		else{
			compare.add(Calendar.DAY_OF_YEAR,-1);
			if(compare.compareTo(cal) <= 0){
				yesterday=true;
			}
		}
		seconds = (int) (millis/1000);
		minutes = (int) (millis/60000);
		hours = (int) (millis/3600000);
		days = (int) (millis/86400000);
	}
	
}
@Function(info="Creates a new RelativeDate object based on the passed in XMLGregorianCalendar object.")
@CompileStatic
public RelativeDate getRelativeDate(
	@Arg(name='cal',info='javax.xml.datatype.XMLGregorianCalendar object to create RelativeDate with.',nullable=false)
	javax.xml.datatype.XMLGregorianCalendar cal){
	return new RelativeDate(cal.toGregorianCalendar());
}

@Function(info="Creates a new RelativeDate object based on the passed in Calendar object.")
@CompileStatic
public RelativeDate getRelativeDate(
	@Arg(name='cal',info='Calendar object to create RelativeDate with.',nullable=false)
	Calendar cal){
	return new RelativeDate(cal);
}

@Function(info="Returns relatively formated presentation of date as String from passed in XMLGregorianCalendar object.")
@CompileStatic
public String formatRelative(
	@Arg(name='cal',info='XMLGregorianCalendar object to format.',nullable=false)
	javax.xml.datatype.XMLGregorianCalendar cal){
	return formatRelative(cal.toGregorianCalendar());
}

@Function(info="Returns relatively formated presentation of date as String from passed in String.")
@CompileStatic
public String formatRelative(
	@Arg(name='xmlDate',info='String to format.',nullable=false)
	String xmlDate){
	return formatRelative(DateNumberFormatCache.datatypeFactory.newXMLGregorianCalendar(xmlDate));
}

@Function(info="Returns relatively formated presentation of date as String from passed in Date object.")
@CompileStatic
public String formatRelative(
	@Arg(name='date',info='Date object to format.',nullable=false)
	Date date){
	Calendar cal = Calendar.getInstance();
	cal.setTime(date);
	return formatRelative(cal);
}
	
@Function(info="Returns relatively formated presentation of date as String from passed in Long object.")
@CompileStatic
public String formatRelative(
	@Arg(name='date',info='Long object to format.',nullable=false)
	Long time){
	Calendar cal = Calendar.getInstance();
	cal.setTimeInMillis(time);
	return formatRelative(cal);
}

@Function(info="Returns relatively formated presentation of date as String from passed in Calendar object.")
@CompileStatic
public String formatRelative(
	@Arg(name='cal',info='Calendar object to format.',nullable=false)
	Calendar cal){
	RelativeDate rd = new RelativeDate(cal);
	def pluralTest = (rd.minutes==61 || rd.minutes==121 || rd.minutes==181)?"":"s";
	
	if(!rd.future){
		if(rd.seconds ==1){
			return "1 second ago";
		}
		if(rd.seconds < 60){
			return "${rd.seconds} seconds ago";
		}
		if(rd.minutes==1){
			return "1 minute ago";
		}
		if(rd.minutes<60){
			return "${rd.minutes} minutes ago";
		}
		if(rd.minutes<120){
			if(rd.minutes==60) {
				return "1 hour ago";
			} else {
				return "1 hour, ${rd.minutes-60} minute${pluralTest} ago";
			}
		}
		if(rd.minutes<180){
			if(rd.minutes==120) {
				return "2 hours ago";
			} else {
				return "2 hours, ${rd.minutes-120} minute${pluralTest} ago";
			}
		}
		if(rd.minutes<240){
			if(rd.minutes==180) {
				return "3 hours ago";
			} else {
				return "3 hours, ${rd.minutes-180} minute${pluralTest} ago";
			}
		}
		if(rd.today){
			return "Today, ${format(cal,'h:mm a')}";
		}
		if(rd.yesterday){
			return "Yesterday, ${format(cal,'h:mm a')}";
		}
	}
	return format(cal,"MMMM d, yyyy");
}

@Function(info="Formats a Calendar into a date/time string")
@CompileStatic
public String format(
	@Arg(name='cal',info='Calendar object to format.',nullable=false)
	Calendar cal,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat){
	return format(cal, dateFormat, cal.timeZone);
}

@Function(info="Formats a Calendar into a date/time string")
@CompileStatic
public String format(
	@Arg(name='cal',info='Calendar object to format.',nullable=false)
	Calendar cal,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat,
	@Arg(name='timeZone',info='TimeZone object for the calendar of this DateFormat object.',nullable=true)
	TimeZone timeZone){
	Map<String,DateFormat> cache = DateNumberFormatCache.instance.get();
	DateFormat fmt = cache.get(dateFormat);
	if(fmt==null){
		if("w3c".equalsIgnoreCase(dateFormat)){
			fmt = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
			fmt.setTimeZone(TimeZone.getTimeZone('UTC'));
		}
		else if("RFC822".equalsIgnoreCase(dateFormat) || "RSS".equalsIgnoreCase(dateFormat)){
			fmt = new SimpleDateFormat("EEE', 'dd' 'MMM' 'yyyy' 'HH:mm:ss' 'Z");
		}
		else{
			fmt = new SimpleDateFormat(dateFormat);
		}
		cache.put(dateFormat,fmt);
	}
	if(!"w3c".equalsIgnoreCase(dateFormat)){
		fmt.setTimeZone(timeZone);
	}
	return fmt.format(cal.time);
}

@Function(info="Formats a Date into a date/time string to the format passed in.")
@CompileStatic
public String format(
	@Arg(name='date',info='Date object to format.',nullable=false)
	Date date,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat){
	Calendar cal = Calendar.getInstance();
	cal.setTime(date);
	return format(cal,dateFormat);
}

@Function(info="Formats a Date into ordinal date string.")
@CompileStatic
public String formatOrdinalDayDate(
	@Arg(name='date',info='Date object to format.',nullable=false)
	Date date){
	if(date != null){
		String month = format( date, "MMMMM");
		String day = format(date, "d");
		String year = format(date,"yyyy");
		int d = Integer.parseInt(day);
		int m = d % 100;
		String[] suffix = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
		String dayText = suffix[(m > 10 && m < 20) ? 0 : (m % 10)];
		return month+" "+day+dayText+", "+year;
	}
}

@Function(info="Formats a Date per specified format and time zone.")
@CompileStatic
public String format(
	@Arg(name='date',info='Date object to format.',nullable=false)
	Date date,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat,
	@Arg(name='timeZone',info='TimeZone object for the Date.',nullable=false)
	TimeZone timeZone){
	Calendar cal = Calendar.getInstance();
	cal.setTime(date);
	cal.setTimeZone(timeZone);
	return format(cal,dateFormat);
}

@Function(info="Formats a XMLGregorianCalendar per specified format and time zone.")
@CompileStatic
public String format(
	@Arg(name='cal',info='XMLGregorianCalendar object to format.',nullable=false)
	javax.xml.datatype.XMLGregorianCalendar cal,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat,
	@Arg(name='timeZone',info='TimeZone object for the XMLGregorianCalendar.',nullable=false)
	TimeZone timeZone){
	return format(cal.toGregorianCalendar(),dateFormat,timeZone);
}

@Function(info="Formats a XMLGregorianCalendar per specified format.")
@CompileStatic
public String format(
	@Arg(name='cal',info='XMLGregorianCalendar object to format.',nullable=false)
	javax.xml.datatype.XMLGregorianCalendar cal,
	@Arg(name='dateFormat',info='String representation for date format.',nullable=false)
	String dateFormat){
	return format(cal.toGregorianCalendar(),dateFormat);
}

@CompileStatic
public class DateNumberFormatCache extends ThreadLocal<Map<String,DateFormat>> {
	public static DateNumberFormatCache instance  = new DateNumberFormatCache();
	public static final DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
	
	public Map<String,DateFormat> initialValue(){
		return new HashMap<String,DateFormat>();
	}
	

}
