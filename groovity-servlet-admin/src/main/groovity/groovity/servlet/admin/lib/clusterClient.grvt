/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import javax.management.*;
import java.lang.management.ManagementFactory;
import com.disney.groovity.servlet.admin.ClusterClient;
import com.disney.groovity.servlet.admin.DefaultClusterProvider;
import com.disney.groovity.servlet.admin.LocalHostResolver;

/**
 * Get the desired cluster implementation from the environment
 */
static conf=[
	'groovity.clusterProvider':'com.disney.groovity.servlet.admin.DefaultClusterProvider',
	'groovity.port':'80',
	'groovity.localHostResolver':'com.disney.groovity.servlet.admin.DefaultLocalHostResolver'
]

static __singleton

static init(){
	LocalHostResolver lhr = Class.forName(conf['groovity.localHostResolver']).newInstance();
	__singleton = new ClusterClient();
	__singleton.setClusterProvider(Class.forName(conf['groovity.clusterProvider']).newInstance());
	__singleton.setLocalHostResolver(lhr);
	__singleton.setPort(Integer.parseInt(conf['groovity.port']));
	__singleton.init();
}

static destroy(){
	__singleton.destroy();
}

//runtime: return client
__singleton