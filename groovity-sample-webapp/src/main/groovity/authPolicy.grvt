/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
 
/**
 * Define the web authentication policy used for secure UI and API calls; digest authentication is supported
 * for browser or API calls, and signature authentication is also configured to allow HMAC signing of messages as an
 * alternative mode of API authentication.  Both digest and signature authentication are configured with custom 
 * plugins to retrieve the appropriate credentials from another library that accesses the application database.
 *
 * @author Alex Vigdor
 */
 
static web=[
	auths:[
		[
			type:"digest",
			realm:"GroovitySampleWebApp",
			nonceSecret:"eLJGUcpMvWS7VQoX7oFn",
			maxNonceAge:120000,
			passwordDigester:{ username,realm -> 
				def user = load('/data/factory')('user',"userName=${username}")?.first()
				user?.decryptDigest()
			},
			domain:"/secure/"
		],
		[
			type:'signature',
			realm:"GroovitySampleWebAppSignature",
			headers:["(request-target)","date", "host"],
			keychain:{ keyId ->
				def user = load('/data/factory')('user',"userName=${keyId}")?.first()
				user?.signingKey
			}
		]
	]
]
