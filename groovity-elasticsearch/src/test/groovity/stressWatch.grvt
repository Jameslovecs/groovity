/*******************************************************************************
 * Â© 2018 Disney | ABC Television Group
 *
 * Licensed under the Apache License, Version 2.0 (the "Apache License")
 * with the following modification; you may not use this file except in
 * compliance with the Apache License and the following modification to it:
 * Section 6. Trademarks. is deleted and replaced with:
 *
 * 6. Trademarks. This License does not grant permission to use the trade
 *     names, trademarks, service marks, or product names of the Licensor
 *     and its affiliates, except as required to comply with Section 4(c) of
 *     the License and to reproduce the content of the NOTICE file.
 *
 * You may obtain a copy of the Apache License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Apache License with the above modification is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the Apache License for the specific
 * language governing permissions and limitations under the Apache License.
 *******************************************************************************/
import java.util.concurrent.atomic.AtomicInteger

load '/data/factory'

int iters = 10000

ConcurrentSkipListSet seenShoes = new ConcurrentSkipListSet()

ConcurrentSkipListSet seenShoes2 = new ConcurrentSkipListSet()

http(method:'DELETE',url:'http://localhost:9200/unit_test_shoe_inventory'){handler{}}
factory('shoe').store()

CountDownLatch latch = new CountDownLatch(iters)
CountDownLatch latch2 = new CountDownLatch(iters)

AtomicInteger counter = new AtomicInteger(0)

def watcher = factory.watch('shoe'){
	//log(info:"BY TYPE counting down ${latch}")
	def shoe = factory(it)
	if(!seenShoes.add((int)shoe.size)){
		log(warn:"ALREADY SEEN SHOE ${shoe.size}")
	}
	latch.countDown()
	counter.incrementAndGet()
}

def watchers = (1..iters).collect{
	factory.watch('shoe',it as String){ ptr->
		//log(info:"BY ID counting down ${latch2}")
		if(!seenShoes2.add(ptr.id)){
			log(warn:"ALREADY SEEN SHOE ${ptr.id}")
		}
		latch2.countDown()
	}
}


def shoes = (1..iters).collect{
	def shoe = factory('shoe').putAll(modified:System.currentTimeMillis(), size:it)
	shoe.pointer= new Pointer('shoe',it.toString())
	shoe.store()
}
log(info:"Done storing, now waiting")

try{
	assert latch.await(100,TimeUnit.SECONDS)
	assert latch2.await(100,TimeUnit.SECONDS)
	Thread.sleep(2000)
	if(seenShoes.size() !=iters){
		def missing = []
		(1..iters).each{ if(!seenShoes.contains(it)){ missing.add(it) }}
		throw new Exception("Watch by type Missed ${missing}")
	}
	if(seenShoes2.size() !=iters){
		def missing = []
		(1..iters).each{ if(!seenShoes2.contains(it)){ missing.add(it) }}
		throw new Exception("Watch By ID Missed ${missing}")
	}
	assert counter.get() == iters
}
finally{
	watcher.cancel(true)
	watchers.each{ it.cancel(true) }
	shoes.each{ it.delete() }
}
"done"